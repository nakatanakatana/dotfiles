[[plugins]]
repo = 'Shougo/dein.vim'

# ==========================================================
# color
# ==========================================================

[[plugins]]
repo = 'lifepillar/vim-solarized8'
hook_add = '''
" syntax enable
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif
set background=dark
colorscheme solarized8
'''

# ==========================================================
# powerline
# ==========================================================

[[plugins]]
repo = 'majutsushi/tagbar'

[[plugins]]
repo = 'lambdalisue/gina.vim'
hook_add = '''
nnoremap <Leader>gs :<C-u>Gina status<CR>
nnoremap <Leader>gd :<C-u>Gina diff<CR>
nnoremap <Leader>gb :<C-u>Gina blame<CR>
nnoremap <Leader>gc :<C-u>Gina commit<CR>
nnoremap <Leader>gl :<C-u>Gina log<CR>
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
set laststatus=2
'''

# ==========================================================
# edit
# ==========================================================

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
nmap <Leader>c <Plug>(caw:hatpos:toggle)
vmap <Leader>c <Plug>(caw:hatpos:toggle)
'''

# ==========================================================
# terminal
# ==========================================================

[[plugins]]
repo = 'tpope/vim-dispatch'


# ==========================================================
# linter
# ==========================================================

# ==========================================================
# lsp
# ==========================================================

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
" let g:asyncomplete_log_file = expand('~/asyncomplete.log')

let g:asyncomplete_auto_popup = 1
let g:asyncomplete_smart_completion = 1
let g:asyncomplete_remove_duplicates = 1

imap <c-space> <Plug>(asyncomplete_force_refresh)
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<cr>"
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-file.vim'
hook_add = '''
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
   \ 'name': 'file',
   \ 'allowlist': ['*'],
   \ 'priority': 10,
   \ 'completor': function('asyncomplete#sources#file#completor')
   \ }))
'''

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
let g:lsp_text_edit_enabled = 1
let g:lsp_document_code_action_signs_enabled = 0
let g:lsp_diagnostics_float_cursor = 1
let g:lsp_diagnostics_echo_cursor = 1

nnoremap <silent> <Leader>d :<C-u>LspDefinition<CR>
nnoremap <silent> <Leader>da :LspCodeAction <CR>
nnoremap <silent> <Leader>ds :split \| :LspDefinition <CR>
nnoremap <silent> <Leader>dv :vsplit \| :LspDefinition <CR>
nnoremap <silent> <leader>dd :<C-u>LspDocumentDiagnostics<CR>
nnoremap <silent> <leader>de :<C-u>LspNextError<CR>
nnoremap <silent> <leader>dw :<C-u>LspNextWarning<CR>
nnoremap <silent> <leader>dn :<C-u>LspNextDiagnostic<CR>
nnoremap <silent> <leader>dp :<C-u>LspPreviousDiagnostic<CR>
nnoremap <silent> <Leader>r :<C-u>LspReferences<CR>
nnoremap <silent> <Leader>h :<C-u>LspHover<CR>
nnoremap <silent> <Leader>i :<C-u>LspImplementation<CR>

autocmd BufEnter * nnoremap <silent> <leader>df :<C-u>LspDocumentFormatSync<CR>
autocmd BufEnter * nnoremap <silent> <leader>dl :<C-u>LspDocumentFormatSync --server=efm-langserver<CR>
autocmd BufEnter *.ts,*tsx,*.js,*.jsx nnoremap <Leader>df :!npx --no-install eslint --fix "%"<CR>
autocmd BufEnter *.ts,*tsx,*.js,*.jsx nnoremap <silent> <leader>h :<C-u>LspHover --server=typescript-language-server<CR>
" autocmd BufEnter *.ts,*.tsx call execute('LspDocumentFormatSync --server=eslint-language-server')
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
hook_add = '''
let g:lsp_settings = {
\ 'vls': {
\   'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
\  },
\ 'golangci-lint-langserver': {
\   'initialization_options': {'command': ['golangci-lint', 'run', '--out-format', 'json']},
\  },
\ 'efm-langserver': {
\   'disabled': v:false,
\   'allowlist':['typescript', 'typescriptreact', 'javascript', 'javascriptreact', 'json', 'markdown'],
\  },
\}

" for languages
let g:lsp_settings_filetype_go = ['gopls', 'golangci-lint-langserver']
let g:lsp_settings_filetype_typescript = ['efm-langserver', 'typescript-language-server']
" let g:lsp_settings_filetype_typescript = ['eslint-language-server', 'typescript-language-server']
'''

[[plugins]]
repo = 'halkn/lightline-lsp'

[[plugins]]
repo = 'micchy326/lightline-lsp-progress'
depends = ['lightline.vim', 'vim-lsp', 'halkn/lightline-lsp']
hook_add = '''
let g:lsp_work_done_progress_enabled = 1
let g:lightline = {
\ 'colorscheme': 'solarized',
\ 'active': {
\   'left': [
\     [ 'mode', 'paste' ],
\     [ 'readonly', 'filename', 'modified', 'lsp_status' ],
\   ],
\   'right': [
\     [ 'lsp_errors', 'lsp_warnings', 'lsp_ok' ],
\     [ 'lineinfo', 'percent' ],
\     [ 'fileformat', 'fileencoding', 'filetype' ],
\   ],
\ },
\ 'component_function': {
\   'lsp_status': 'lightline_lsp_progress#progress',
\ },
\ 'component_expand': {
\   'lsp_warnings': 'lightline_lsp#warnings',
\   'lsp_errors':   'lightline_lsp#errors',
\   'lsp_ok':       'lightline_lsp#ok',
\ },
\ 'component_type': {
\   'lsp_warnings': 'warning',
\   'lsp_errors':   'error',
\   'lsp_ok':       'middle',
\ },
\ }
'''

[[plugins]]
repo = 'tsuyoshicho/vim-efm-langserver-settings'
# build = 'go install -u github.com/mattn/efm-langserver@latest'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
depends = ['vim-lsp']
hook_add = '''
" NOTE: You can use other key to expand snippet.

" Expand
imap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
smap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'

" Expand or jump
imap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
smap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'

" Jump forward or backward
imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'

" Select or cut text to use as $TM_SELECTED_TEXT in the next snippet.
" See https://github.com/hrsh7th/vim-vsnip/pull/50
nmap        s   <Plug>(vsnip-select-text)
xmap        s   <Plug>(vsnip-select-text)
nmap        S   <Plug>(vsnip-cut-text)
xmap        S   <Plug>(vsnip-cut-text)

" If you want to use snippet for multiple filetypes, you can `g:vsip_filetypes` for it.
let g:vsnip_filetypes = {}
let g:vsnip_filetypes.javascriptreact = ['javascript']
let g:vsnip_filetypes.typescriptreact = ['typescript']
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'


# ==========================================================
# lang
# ==========================================================
[[plugins]]
repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = 'vim-test/vim-test'
hook_add = '''
let g:test#strategy = 'dispatch'

nnoremap <Leader>t5 :TestFile<CR>
nnoremap <Leader>t4 :TestSuite<CR>
nnoremap <Leader>t3 :TestNearest<CR>
nnoremap <Leader>t2 :TestLast<CR>
'''


# ==========================================================
# util
# ==========================================================
[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'
hook_add = '''
let g:fern#renderer = "nerdfont"
'''

[[plugins]]
repo = 'lambdalisue/fern-hijack.vim'

[[plugins]]
repo = 'LumaKernel/fern-mapping-fzf.vim'
depends = ['fzf', 'fern.vim']

[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
nnoremap <Leader><Leader>c :Fern . -drawer -toggle<CR>
nnoremap <Leader><Leader>. :Fern . -drawer<CR>
nnoremap <Leader><Leader> :Fern %:h -drawer<CR>
'''

[[plugins]]
repo = 'airblade/vim-rooter'
hook_add = '''
let g:rooter_cd_cmd="lcd"
let g:rooter_patterns = ['tags', '.git', 'node_modules/','.git/', '_darcs/', '.hg/', '.bzr/', 'Makefile', 'GNUMakefile', 'GNUmakefile', '.svn/']
'''

[[plugins]]
repo = 'terryma/vim-expand-region'
hook_add = '''
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
nnoremap <Leader>g<BS> :GitGutterLineHighlightsToggle<CR>
'''

[[plugins]]
repo = 'ruanyl/vim-gh-line'
hook_add = '''
let g:gh_line_map = '<leader>go'
let g:gh_line_blame_map = '<leader>gob'
let g:gh_open_command = 'wsl-open '
'''

# [[plugins]]
# repo = 'lilydjwg/colorizer'

[[plugins]]
repo = 'rrethy/vim-hexokinase'
build = 'make hexokinase'
hook_add = '''
" let g:Hexokinase_highlighters = ['sign_column']
let g:Hexokinase_highlighters = ['backgroundfull']
'''

[[plugins]]
repo = 'vim-scripts/vim-auto-save'
hook_add = '''
let g:auto_save = 1
let g:auto_save_in_insert_mode = 0
let g:auto_save_silent = 1
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'junegunn/fzf'
hook_add = '''
nnoremap <Leader>b :<C-u>Buffers<CR>
nnoremap <Leader>f :<C-u>Rg<CR>
nnoremap <C-p> :<C-u>GFiles<CR>
'''

[[plugins]]
repo = 'mileszs/ack.vim'
hook_add = '''
if executable('rg')
  let g:ctrlp_use_caching = 0
  let g:ctrlp_user_command = 'rg --files --no-ignore --ignore-file ~/.config/ripgrep/ignore --hidden %s'
  let g:ackprg = 'rg --vimgrep --hidden'
endif
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'

[[plugins]]
repo = 'machakann/vim-highlightedyank'


[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
" undo/redo
call submode#enter_with('undo/redo', 'n', '', 'g-', 'g-')
call submode#enter_with('undo/redo', 'n', '', 'g+', 'g+')
call submode#enter_with('undo/redo', 'n', '', 'g=', 'g+')
call submode#leave_with('undo/redo', 'n', '', '<Esc>')
call submode#map('undo/redo', 'n', '', '-', 'g-')
call submode#map('undo/redo', 'n', '', '+', 'g+')
call submode#map('undo/redo', 'n', '', '=', 'g+')
" splitsize
call submode#enter_with('bufmove', 'n', '', '<Leader>w>', '<C-w>>')
call submode#enter_with('bufmove', 'n', '', '<Leader>w.', '<C-w>>')
call submode#enter_with('bufmove', 'n', '', '<Leader>w<', '<C-w><')
call submode#enter_with('bufmove', 'n', '', '<Leader>w,', '<C-w><')
call submode#enter_with('bufmove', 'n', '', '<Leader>w+', '<C-w>+')
call submode#enter_with('bufmove', 'n', '', '<Leader>w=', '<C-w>+')
call submode#enter_with('bufmove', 'n', '', '<Leader>w-', '<C-w>-')
call submode#enter_with('bufmove', 'n', '', '<Leader>w0', '<C-w>=')
call submode#leave_with('bufmove', 'n', '', '<Esc>')
call submode#map('bufmove', 'n', '', '>', '<C-w>>')
call submode#map('bufmove', 'n', '', '.', '<C-w>>')
call submode#map('bufmove', 'n', '', '<', '<C-w><')
call submode#map('bufmove', 'n', '', ',', '<C-w><')
call submode#map('bufmove', 'n', '', '+', '<C-w>+')
call submode#map('bufmove', 'n', '', '=', '<C-w>+')
call submode#map('bufmove', 'n', '', '-', '<C-w>-')
call submode#map('bufmove', 'n', '', '0', '<C-w>=')
" splitselect
call submode#enter_with('splitselect', 'n', '', '<Leader>wh', '<C-w>h')
call submode#enter_with('splitselect', 'n', '', '<Leader>wj', '<C-w>j')
call submode#enter_with('splitselect', 'n', '', '<Leader>wk', '<C-w>k')
call submode#enter_with('splitselect', 'n', '', '<Leader>wl', '<C-w>l')
call submode#leave_with('splitselect', 'n', '', '<Esc>')
call submode#map('splitselect', 'n', '', 'h', '<C-w>h')
call submode#map('splitselect', 'n', '', 'j', '<C-w>j')
call submode#map('splitselect', 'n', '', 'k', '<C-w>k')
call submode#map('splitselect', 'n', '', 'l', '<C-w>l')
'''
