[[plugins]]
repo = 'Shougo/dein.vim'

# ==========================================================
# color
# ==========================================================

[[plugins]]
repo = 'lifepillar/vim-solarized8'
hook_add = '''
" syntax enable
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif
set background=dark
colorscheme solarized8
'''

# ==========================================================
# powerline
# ==========================================================

[[plugins]]
repo = 'majutsushi/tagbar'

[[plugins]]
repo = 'lambdalisue/gina.vim'
hook_add = '''
nnoremap <Leader>gs :<C-u>Gina status<CR>
nnoremap <Leader>gd :<C-u>Gina diff<CR>
nnoremap <Leader>gb :<C-u>Gina blame<CR>
nnoremap <Leader>gc :<C-u>Gina commit<CR>
nnoremap <Leader>gl :<C-u>Gina log<CR>
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['tagbar', 'gina.vim']
hook_add = '''
call airline#parts#define_function('gina', 'gina#component#repo#branch')
let g:airline_section_b = airline#section#create(['hunks', 'gina'])
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
depends = 'vim-airline'
hook_add = '''
let g:airline_theme='solarized'
let g:airline_solarized_bg='dark'
'''

[[plugins]]
repo = 'gcmt/taboo.vim'
depends = 'vim-airline'
hook_add = '''
"set guioptions-=e
"set sessionoptions+=tabpages,globals
let g:taboo_tab_format=' %N %f%m %w '
'''

# ==========================================================
# edit
# ==========================================================

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
nmap <Leader>c <Plug>(caw:hatpos:toggle)
vmap <Leader>c <Plug>(caw:hatpos:toggle)
'''

# ==========================================================
# terminal
# ==========================================================

[[plugins]]
repo = 'tpope/vim-dispatch'


# ==========================================================
# linter
# ==========================================================

# ==========================================================
# lsp
# ==========================================================

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
let g:asyncomplete_log_file = expand('~/asyncomplete.log')

let g:asyncomplete_auto_popup = 1
let g:asyncomplete_smart_completion = 1
let g:asyncomplete_remove_duplicates = 1

imap <c-space> <Plug>(asyncomplete_force_refresh)
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<cr>"
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
let g:lsp_text_edit_enabled = 1

nnoremap <silent> <Leader>d :<C-u>LspDefinition<CR>
nnoremap <silent> <Leader>da :LspCodeAction <CR>
nnoremap <silent> <Leader>ds :split \| :LspDefinition <CR>
nnoremap <silent> <Leader>dv :vsplit \| :LspDefinition <CR>
nnoremap <silent> <leader>dd :<C-u>LspDocumentDiagnostics<CR>
nnoremap <silent> <Leader>r :<C-u>LspReferences<CR>
nnoremap <silent> <Leader>h :<C-u>LspHover<CR>
nnoremap <silent> <Leader>i :<C-u>LspImplementation<CR>

autocmd BufEnter * nnoremap <silent> <leader>df :<C-u>LspDocumentFormatSync<CR>
autocmd BufEnter *.ts,*tsx,*.js,*.jsx nnoremap <Leader>df :!npm run lint:exec -- "%" --fix<CR>
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
hook_add = '''
let g:lsp_settings = {
\ 'vls': {
\   'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
\  }
\}
'''

[[plugins]]
repo = 'tsuyoshicho/vim-efm-langserver-settings'
build = 'go get -u github.com/mattn/efm-langserver'
depends = ['vim-lsp']



# ==========================================================
# lang
# ==========================================================
# [[plugins]]
# repo = 'w0rp/ale'
# hook_add = '''
# let g:ale_sign_column_always = 1
# let g:ale_virtualtext_cursor = 1
#
# nmap <silent> <leader>ap <Plug>(ale_previous)
# nmap <silent> <leader>an <Plug>(ale_next)
# nmap <silent> <leader>aa <Plug>(ale_toggle)
# '''

[[plugins]]
repo = 'janko-m/vim-test'
hook_add = '''
let g:test#strategy = 'dispatch'

nnoremap <Leader>t5 :TestFile<CR>
nnoremap <Leader>t4 :TestSuite<CR>
nnoremap <Leader>t3 :TestNearest<CR>
nnoremap <Leader>t2 :TestLast<CR>
'''


# ==========================================================
# util
# ==========================================================
[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
source ~/.config/nvim/plugins/denite.vim
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
vmap <Enter> <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
if !has('nvim')
  call dein#add('roxma/nvim-yarp')
  call dein#add('roxma/vim-hug-neovim-rpc')
endif
nnoremap <silent> <leader>q :<C-u>Defx -listed -resume -buffer-name=tab`tabpagenr()`<CR>
" defx Config: start -----------------

autocmd FileType defx call s:defx_my_settings()
    function! s:defx_my_settings() abort
     " Define mappings
      nnoremap <silent><buffer><expr> <CR>
     \ defx#do_action('open')
      nnoremap <silent><buffer><expr> c
     \ defx#do_action('copy')
      nnoremap <silent><buffer><expr> m
     \ defx#do_action('move')
      nnoremap <silent><buffer><expr> p
     \ defx#do_action('paste')
      nnoremap <silent><buffer><expr> l
     \ defx#do_action('open')
      nnoremap <silent><buffer><expr> E
     \ defx#do_action('open', 'vsplit')
      nnoremap <silent><buffer><expr> P
     \ defx#do_action('open', 'pedit')
      nnoremap <silent><buffer><expr> K
     \ defx#do_action('new_directory')
      nnoremap <silent><buffer><expr> N
     \ defx#do_action('new_file')
      nnoremap <silent><buffer><expr> d
     \ defx#do_action('remove')
      nnoremap <silent><buffer><expr> r
     \ defx#do_action('rename')
      nnoremap <silent><buffer><expr> x
     \ defx#do_action('execute_system')
      nnoremap <silent><buffer><expr> yy
     \ defx#do_action('yank_path')
      nnoremap <silent><buffer><expr> .
     \ defx#do_action('toggle_ignored_files')
      nnoremap <silent><buffer><expr> h
     \ defx#do_action('cd', ['..'])
      nnoremap <silent><buffer><expr> ~
     \ defx#do_action('cd')
      nnoremap <silent><buffer><expr> q
     \ defx#do_action('quit')
      nnoremap <silent><buffer><expr> <Space>
     \ defx#do_action('toggle_select') . 'j'
      nnoremap <silent><buffer><expr> *
     \ defx#do_action('toggle_select_all')
      nnoremap <silent><buffer><expr> j
     \ line('.') == line('$') ? 'gg' : 'j'
      nnoremap <silent><buffer><expr> k
     \ line('.') == 1 ? 'G' : 'k'
      nnoremap <silent><buffer><expr> <C-l>
     \ defx#do_action('redraw')
      nnoremap <silent><buffer><expr> <C-g>
     \ defx#do_action('print')
      nnoremap <silent><buffer><expr> cd
     \ defx#do_action('change_vim_cwd')
    endfunction

" defx Config: end -------------------
'''
hook_source = '''
function! Root(path) abort
  return fnamemodify(a:path, ':t')
endfunction

call defx#custom#source('file', {
    \ 'root': 'Root',
    \})

call defx#custom#column('filename', {
    \ 'directory_icon': '',
    \ 'opened_icon': '',
    \ })

call defx#custom#column('mark', {
    \ 'readonly_icon': '✗',
    \ 'selected_icon': '✓',
    \ })

call defx#custom#option('_', {
    \ 'columns': 'indent:git:icons:filename',
    \ 'show_ignored_files': 1,
    \ })
'''

[[plugins]]
repo ='kristijanhusak/defx-icons'

[[plugins]]
repo ='kristijanhusak/defx-git'
hook_add = '''
let g:defx_git#indicators = {
\ 'Modified'  : '+',
\ 'Staged'    : '●',
\ 'Untracked' : '?',
\ 'Renamed'   : '➜',
\ 'Unmerged'  : '═',
\ 'Deleted'   : 'x',
\ 'Unknown'   : '?'
\ }
'''

[[plugins]]
repo = 'airblade/vim-rooter'
hook_add = '''
let g:rooter_use_lcd = 1
let g:rooter_patterns = ['tags', '.git', 'node_modules/','.git/', '_darcs/', '.hg/', '.bzr/', 'Makefile', 'GNUMakefile', 'GNUmakefile', '.svn/']
'''

[[plugins]]
repo = 'terryma/vim-expand-region'
hook_add = '''
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
nnoremap <Leader>g<BS> :GitGutterLineHighlightsToggle<CR>
'''

[[plugins]]
repo = 'ruanyl/vim-gh-line'
hook_add = '''
let g:gh_line_map = '<leader>go'
let g:gh_line_blame_map = '<leader>gob'
'''

# [[plugins]]
# repo = 'lilydjwg/colorizer'

[[plugins]]
repo = 'rrethy/vim-hexokinase'
build = 'make hexokinase'
hook_add = '''
" let g:Hexokinase_highlighters = ['sign_column']
let g:Hexokinase_highlighters = ['backgroundfull']
'''

[[plugins]]
repo = 'vim-scripts/vim-auto-save'
hook_add = '''
let g:auto_save = 1
let g:auto_save_in_insert_mode = 0
let g:auto_save_silent = 1
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'junegunn/fzf'
hook_add = '''
nnoremap <Leader>b :<C-u>Buffers<CR>
nnoremap <Leader>f :<C-u>Rg<CR>
nnoremap <C-p> :<C-u>GFiles<CR>
'''

[[plugins]]
repo = 'mileszs/ack.vim'
hook_add = '''
if executable('rg')
  let g:ctrlp_use_caching = 0
  let g:ctrlp_user_command = 'rg --files --no-ignore --ignore-file ~/.config/ripgrep/ignore --hidden %s'
  let g:ackprg = 'rg --vimgrep --hidden'
endif
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'

[[plugins]]
repo = 'machakann/vim-highlightedyank'


[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
" undo/redo
call submode#enter_with('undo/redo', 'n', '', 'g-', 'g-')
call submode#enter_with('undo/redo', 'n', '', 'g+', 'g+')
call submode#enter_with('undo/redo', 'n', '', 'g=', 'g+')
call submode#leave_with('undo/redo', 'n', '', '<Esc>')
call submode#map('undo/redo', 'n', '', '-', 'g-')
call submode#map('undo/redo', 'n', '', '+', 'g+')
call submode#map('undo/redo', 'n', '', '=', 'g+')
" splitsize
call submode#enter_with('bufmove', 'n', '', '<Leader>w>', '<C-w>>')
call submode#enter_with('bufmove', 'n', '', '<Leader>w.', '<C-w>>')
call submode#enter_with('bufmove', 'n', '', '<Leader>w<', '<C-w><')
call submode#enter_with('bufmove', 'n', '', '<Leader>w,', '<C-w><')
call submode#enter_with('bufmove', 'n', '', '<Leader>w+', '<C-w>+')
call submode#enter_with('bufmove', 'n', '', '<Leader>w=', '<C-w>+')
call submode#enter_with('bufmove', 'n', '', '<Leader>w-', '<C-w>-')
call submode#enter_with('bufmove', 'n', '', '<Leader>w0', '<C-w>=')
call submode#leave_with('bufmove', 'n', '', '<Esc>')
call submode#map('bufmove', 'n', '', '>', '<C-w>>')
call submode#map('bufmove', 'n', '', '.', '<C-w>>')
call submode#map('bufmove', 'n', '', '<', '<C-w><')
call submode#map('bufmove', 'n', '', ',', '<C-w><')
call submode#map('bufmove', 'n', '', '+', '<C-w>+')
call submode#map('bufmove', 'n', '', '=', '<C-w>+')
call submode#map('bufmove', 'n', '', '-', '<C-w>-')
call submode#map('bufmove', 'n', '', '0', '<C-w>=')
" splitselect
call submode#enter_with('splitselect', 'n', '', '<Leader>wh', '<C-w>h')
call submode#enter_with('splitselect', 'n', '', '<Leader>wj', '<C-w>j')
call submode#enter_with('splitselect', 'n', '', '<Leader>wk', '<C-w>k')
call submode#enter_with('splitselect', 'n', '', '<Leader>wl', '<C-w>l')
call submode#leave_with('splitselect', 'n', '', '<Esc>')
call submode#map('splitselect', 'n', '', 'h', '<C-w>h')
call submode#map('splitselect', 'n', '', 'j', '<C-w>j')
call submode#map('splitselect', 'n', '', 'k', '<C-w>k')
call submode#map('splitselect', 'n', '', 'l', '<C-w>l')
'''
