[[plugins]]
repo = 'Shougo/dein.vim'

# ==========================================================
# color
# ==========================================================

[[plugins]]
repo = 'rbtnn/vim-ambiwidth'

[[plugins]]
repo = 'lifepillar/vim-solarized8'
hook_add = '''
" syntax enable
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif
set background=dark
colorscheme solarized8
'''

# ==========================================================
# powerline
# ==========================================================

[[plugins]]
repo = 'lambdalisue/gina.vim'
hook_add = '''
nnoremap <Leader>gs :<C-u>Gina status<CR>
nnoremap <Leader>gd :<C-u>Gina diff<CR>
nnoremap <Leader>gb :<C-u>Gina blame<CR>
nnoremap <Leader>gc :<C-u>Gina commit<CR>
nnoremap <Leader>gl :<C-u>Gina log<CR>
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
set laststatus=2
'''

# ==========================================================
# lsp
# ==========================================================

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
" let g:asyncomplete_log_file = expand('~/asyncomplete.log')
let g:asyncomplete_auto_popup = 1
let g:asyncomplete_smart_completion = 1
let g:asyncomplete_remove_duplicates = 1

imap <c-space> <Plug>(asyncomplete_force_refresh)
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<cr>"
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
let g:lsp_text_edit_enabled = 1
let g:lsp_document_code_action_signs_enabled = 0
let g:lsp_diagnostics_float_cursor = 1
" let g:lsp_diagnostics_echo_cursor = 1

nnoremap <silent> <Leader>d :<C-u>LspDefinition<CR>
nnoremap <silent> <Leader>da :LspCodeAction <CR>
nnoremap <silent> <Leader>ds :split \| :LspDefinition <CR>
nnoremap <silent> <Leader>dv :vsplit \| :LspDefinition <CR>
nnoremap <silent> <leader>dd :<C-u>LspDocumentDiagnostics<CR>
nnoremap <silent> <leader>de :<C-u>LspNextError<CR>
nnoremap <silent> <leader>dw :<C-u>LspNextWarning<CR>
nnoremap <silent> <leader>dn :<C-u>LspNextDiagnostic<CR>
nnoremap <silent> <leader>dp :<C-u>LspPreviousDiagnostic<CR>
nnoremap <silent> <Leader>r :<C-u>LspReferences<CR>
nnoremap <silent> <Leader>h :<C-u>LspHover<CR>
nnoremap <silent> <Leader>i :<C-u>LspImplementation<CR>

autocmd BufEnter * nnoremap <silent> <leader>df :<C-u>LspDocumentFormatSync<CR>
autocmd BufEnter * nnoremap <silent> <leader>dl :<C-u>LspDocumentFormatSync --server=efm-langserver<CR>
autocmd BufEnter *.ts,*tsx,*.js,*.jsx nnoremap <Leader>df :AsyncRun! npx --no-install eslint --fix "%"<CR>
autocmd BufEnter *.ts,*tsx,*.js,*.jsx nnoremap <silent> <leader>h :<C-u>LspHover --server=typescript-language-server<CR>
" autocmd BufEnter *.ts,*.tsx call execute('LspDocumentFormatSync --server=eslint-language-server')
'''

[[plugins]]
repo = 'tsuyoshicho/vim-efm-langserver-settings'
depends = ['vim-lsp']
# build = 'go install github.com/mattn/efm-langserver@latest'
hook_add = '''
let g:loaded_ale_efm_langserver_settings = 0
let g:loaded_coc_efm_langserver_settings = 0
let g:efm_langserver_settings#customlist = 1
let g:efm_langserver_settings#filetype_whitelist = ['typescript', 'typescriptreact', 'javascript', 'javascriptreact', 'json', 'markdown', 'cue']
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
depends = ['vim-lsp', 'vim-efm-langserver-settings']
hook_add = '''

" for efm-langserver-settings
let s:efm_args = []
if efm_langserver_settings#config_enable()
  let s:efm_args = extend(s:efm_args, ['-c', efm_langserver_settings#config_path()])
endif
if efm_langserver_settings#debug_enable()
  let s:efm_args = extend(s:efm_args, ['-logfile', efm_langserver_settings#debug_path()])
  let s:efm_args = extend(s:efm_args, ['-loglevel', efm_langserver_settings#debug_enable()])
endif

let g:lsp_settings = {
\ 'vls': {
\   'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
\  },
\ 'golangci-lint-langserver': {
\   'initialization_options': {'command': ['golangci-lint', 'run', '--out-format', 'json']},
\  },
\ 'efm-langserver': {
\   'disabled': v:false,
\   'args': s:efm_args,
\   'allowlist': efm_langserver_settings#whitelist(),
\   'blocklist': efm_langserver_settings#blacklist(),
\  },
\}

" for languages
let g:lsp_settings_filetype_go = ['gopls', 'golangci-lint-langserver']
let g:lsp_settings_filetype_typescript = ['efm-langserver', 'typescript-language-server']
" let g:lsp_settings_filetype_typescript = ['eslint-language-server', 'typescript-language-server']
'''

[[plugins]]
repo = 'halkn/lightline-lsp'

[[plugins]]
repo = 'micchy326/lightline-lsp-progress'
depends = ['lightline.vim', 'vim-lsp', 'halkn/lightline-lsp']
hook_add = '''
let g:lsp_work_done_progress_enabled = 1
let g:lightline = {
\ 'colorscheme': 'solarized',
\ 'active': {
\   'left': [
\     [ 'mode', 'paste' ],
\     [ 'readonly', 'filename', 'modified', 'lsp_status' ],
\   ],
\   'right': [
\     [ 'lsp_errors', 'lsp_warnings', 'lsp_ok' ],
\     [ 'lineinfo', 'percent' ],
\     [ 'fileformat', 'fileencoding', 'filetype' ],
\   ],
\ },
\ 'component_function': {
\   'lsp_status': 'lightline_lsp_progress#progress',
\ },
\ 'component_expand': {
\   'asyncrun_ok':  '',
\   'lsp_warnings': 'lightline_lsp#warnings',
\   'lsp_errors':   'lightline_lsp#errors',
\   'lsp_ok':       'lightline_lsp#ok',
\ },
\ 'component_type': {
\   'lsp_warnings': 'warning',
\   'lsp_errors':   'error',
\   'lsp_ok':       'middle',
\ },
\ }
'''

# ==========================================================
# lang
# ==========================================================
[[plugins]]
repo = 'sheerun/vim-polyglot'

# ==========================================================
# util
# ==========================================================
[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'

[[plugins]]
repo = 'airblade/vim-rooter'
hook_add = '''
let g:rooter_cd_cmd="lcd"
let g:rooter_patterns = ['tags', '.git', 'node_modules/','.git/', '_darcs/', '.hg/', '.bzr/', 'Makefile', 'GNUMakefile', 'GNUmakefile', '.svn/']
'''

[[plugins]]
repo = 'terryma/vim-expand-region'
hook_add = '''
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)
'''

[[plugins]]
repo = 'mhinz/vim-signify'

[[plugins]]
repo = 'ruanyl/vim-gh-line'
hook_add = '''
let g:gh_line_map = '<leader>go'
let g:gh_line_blame_map = '<leader>gob'
let g:gh_open_command = 'wsl-open '
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install'
merged = false

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'junegunn/fzf'
hook_add = '''
nnoremap <Leader>b :<C-u>Buffers<CR>
nnoremap <Leader>f :<C-u>Rg<CR>
nnoremap <C-p> :<C-u>GFiles<CR>
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'

[[plugins]]
repo = 'machakann/vim-highlightedyank'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1

let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=grey10
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=grey25

let g:indent_guides_color_change_percent = 1
'''
